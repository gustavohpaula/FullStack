package resources;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.ws.spi.http.HttpContext;

import entities.Fornecedor;
import jakarta.ws.rs.core.Context;
import repository.FornecedorRepository;


@Path("api")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class FornecedorResource {

	FornecedorRepository fornec = new FornecedorRepository();

	
	
	@GET
	public List<Fornecedor> get() {
		return fornec.GetAll();
	}

	@POST
	@Path("adiciona")
	public Response post(@Context HttpContext httpContext) {

		try {
			fornec.Add(fornecedor);
			return Response.status(Response.Status.CREATED).header("Access-Control-Allow-Origin", "*")
					.header("Access-Control-Allow-Credentials", "true")
					.header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
					.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD").entity(fornecedor)
					.build();
		} catch (Exception e) {
			return Response.status(Response.Status.UNAUTHORIZED).header("Access-Control-Allow-Origin", "*")
					.header("Access-Control-Allow-Credentials", "true")
					.header("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
					.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
					.entity(e.getMessage()).build();
		}
	}

	@PUT
	@Path("edita")
	public Response put(@PathParam("cnpj") String cnpj, Fornecedor fornecedor) {

		Fornecedor f = fornec.Get(cnpj);
		if (f == null) {
			return Response.status(Response.Status.NOT_FOUND).build();
		}
		try {
			fornecedor.setCnpj(cnpj);
			fornec.Edit(fornecedor);
			return Response.status(Response.Status.OK).entity("Alteração realizada com sucesso!").build();
		} catch (Exception e) {
			return Response.status(Response.Status.UNAUTHORIZED).entity(e.getMessage()).build();
		}
	}

	@DELETE
	@Path("/remove/{cnpj}")
	public Response delete(@PathParam("cnpj") String cnpj) {

		Fornecedor f = fornec.Get(cnpj);
		if (f == null) {
			return Response.status(Response.Status.NOT_FOUND).build();
		}
		try {
			fornec.Delete(cnpj);
			return Response.status(Response.Status.OK).entity("Cadastro do fornecedor removido").build();
		} catch (Exception e) {
			return Response.status(Response.Status.UNAUTHORIZED).entity(e.getMessage()).build();
		}
	}

}
