package repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;

import entities.Fornecedor;

public class FornecedorRepository {

	private final static HashMap<Integer, Fornecedor> fornecedores = new HashMap<>();

	public List<Fornecedor> GetAll() {
		return new ArrayList<Fornecedor>(fornecedores.values());
	}

	public Fornecedor Get(final int id) {
		return fornecedores.get(id);
	}

	public String Add(final Fornecedor fornecedor) throws Exception {

		if (checkEmail(fornecedor.getEmail()) && checkCnpj(fornecedor)) {
			fornecedores.put(fornecedor.getId(), fornecedor);
			return "cadastro realizado com sucesso!";
		} else {
			throw new Exception();
		}

	}

	public void Edit(final Fornecedor fornecedor) throws Exception {
		if (checkEmail(fornecedor.getEmail()) && checkCnpj(fornecedor)) {
			fornecedores.remove(fornecedor.getId());
			fornecedores.put(fornecedor.getId(), fornecedor);
		} else {
			throw new Exception();
		}
	}

	public void Delete(final int id) {
		fornecedores.remove(id);
	}

	private boolean checkEmail(String email) throws Exception {
		try {
			InternetAddress emailAddr = new InternetAddress(email);
			emailAddr.validate();
			return true;
		} catch (AddressException ex) {
			throw new Exception("Email informado incorreto!");
		}
	}

	private boolean checkCnpj(Fornecedor fornecedor) throws Exception {
		for (int i=0; i<GetAll().size(); i++) {
			String teste = Get(i).getCnpj();s
			if(teste == fornecedor.getCnpj()) {
				throw new Exception("CNPJ jÃ¡ cadastrado");
			}
		}
		return true;
	}
}
